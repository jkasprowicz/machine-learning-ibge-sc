import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_excel("conjunto_dataset.xlsx")


for col in df.columns:
    if col not in ["Ano", "Despesa_Bruta_Empenhadas"]:
        plt.figure()
        sns.scatterplot(data=df, x=col, y="Despesa_Bruta_Empenhadas")
        plt.title(f"Relação entre {col} e Saldo Orçamentário")
        plt.show()


# Definir features e target
X = df[['Receita_Bruta_Realizada', 'Receita_Corrente', 'Receita_Impostos',
            'Despesa_Empenhada_Corrente', 'Despesa_Paga_Corrente']]
y = df['Despesa_Bruta_Empenhadas']
anos = df['Ano']

# Dividir treino e teste (por exemplo, até 2020 para treino)
X_train = X[df['Ano'] <= 2020]
X_test = X[df['Ano'] > 2020]
y_train = y[df['Ano'] <= 2020]
y_test = y[df['Ano'] > 2020]
anos_test = anos[df['Ano'] > 2020]

# Criar e treinar o modelo
model = LinearRegression()
model.fit(X_train, y_train)

# Prever e avaliar
y_pred = model.predict(X_test)
mae = mean_absolute_error(y_test, y_pred)

print("Erro médio absoluto:", mae)

# Mostrar valores reais vs previstos
for ano, real, previsto in zip(anos_test, y_test, y_pred):
    error = abs(real - previsto)
    print(f"Ano: {ano} | Real: {real:,.0f} | Previsto: {previsto:,.0f} | Erro: {error:,.0f}")

# Plotar gráfico
plt.plot(anos_test, y_test, label='Real', marker='o')
plt.plot(anos_test, y_pred, label='Previsto', marker='x')
plt.title('Previsão de Despesa Bruta Empenhadas')
plt.xlabel('Ano')
plt.ylabel('R$')
plt.legend()
plt.grid(True)
plt.xticks(anos_test)
plt.show()